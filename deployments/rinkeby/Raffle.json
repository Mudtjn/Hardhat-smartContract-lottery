{
  "address": "0xd3D885E33367CF2BF423A57E5bBd00385df2408b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_VRFCoordinatorv2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_entraceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d326adf54f3500faccff8ca9614052dc394fd321c0761298439d95c68b7c8e0",
  "receipt": {
    "to": null,
    "from": "0xa1547bD9019fABEcB965404666A0FB7047ccA2cc",
    "contractAddress": "0xd3D885E33367CF2BF423A57E5bBd00385df2408b",
    "transactionIndex": 15,
    "gasUsed": "1254638",
    "logsBloom": "0x
    "blockHash": "0xf9f5352577c2ff98b8a0245d4d4f991569a873dec0b2500a4a5a02452c58ab6d",
    "transactionHash": "0x0d326adf54f3500faccff8ca9614052dc394fd321c0761298439d95c68b7c8e0",
    "logs": [],
    "blockNumber": 10805681,
    "cumulativeGasUsed": "5575747",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "5946",
    "50000",
    60
  ],
  "numDeployments": 1,
  "solcInputHash": "274864094106094d6748047cc2d2e6b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VRFCoordinatorv2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entraceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mudit Jain\",\"details\":\"this contract implements Chainlink VRF2 and Chainlink Keepers \",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that chainlink keeper nodes call to check if 'upkeepNeeded' is true   conditons for upkeep to be true 1.passage of time passed  2.lottery should have 1 player atleast and some ETH 3.Our subscription should funded with LINK 4.The lottery should be in an \\\"open state\\\" \"}},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"events\":{\"RaffleEnter(address)\":{\"notice\":\"Events \"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamperable decentralized smart Contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// Enter lottery paying some amount\\n// Pick Random Winner (Verifiably Random)\\n// Winner to be selected after every X minutes\\n//chainlink oracle-> Randomness , Automated Execution(Chainlink Keeper)\\n// Raffle\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\"; \\n\\nerror Raffle__NotEnoughEthEntered();\\nerror Raffle__TransferFailed() ;\\nerror Raffle__NotOpen() ;\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 totalPlayers,\\n    uint256 raffleState\\n    ) ; \\n\\n/**\\n    * @title A sample Raffle Contract\\n    * @author Mudit Jain\\n    * @notice This contract is for creating an untamperable decentralized smart Contract\\n    * @dev this contract implements Chainlink VRF2 and Chainlink Keepers \\n */ \\n\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n   \\n   /**Type declarations */\\n   enum RaffleState{\\n       OPEN,\\n       CALCULATING\\n   }\\n   \\n    /**State  */\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane ;\\n    uint64 private immutable i_subscriptionId ;\\n    uint32 private immutable i_callbackGasLimit ; \\n    uint16 private constant REQUEST_CONFIRMATIONS = 3 ; \\n    uint32 private constant NUM_WORDS = 1 ; \\n    //number of random words wanted\\n    \\n    //Lottery variables \\n    address private s_recentWinner ; \\n    RaffleState private s_raffleState ;\\n    uint256 private s_lastTimeStamp ; \\n    uint256 private immutable i_interval ;\\n\\n    /**Events */\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId); \\n    event WinnerPicked(address indexed winner); \\n\\n    constructor(\\n        address _VRFCoordinatorv2,\\n        uint256 _entraceFee, \\n        bytes32 gasLane, \\n        uint64 subscriptionId, \\n        uint32 callbackGasLimit,\\n        uint256 interval\\n        )\\n        VRFConsumerBaseV2(_VRFCoordinatorv2)\\n    {\\n        i_entranceFee = _entraceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(_VRFCoordinatorv2);\\n        i_gasLane = gasLane ; \\n        i_subscriptionId = subscriptionId ;\\n        i_callbackGasLimit = callbackGasLimit ; \\n        s_raffleState = RaffleState.OPEN ;\\n        s_lastTimeStamp = block.timestamp ; \\n        i_interval = interval ;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughEthEntered();\\n        }\\n        if(s_raffleState != RaffleState.OPEN){\\n            revert Raffle__NotOpen(); \\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     *@dev This is the function that chainlink keeper nodes call\\n     * to check if 'upkeepNeeded' is true  \\n     * conditons for upkeep to be true\\n     * 1.passage of time passed \\n     * 2.lottery should have 1 player atleast and some ETH\\n     * 3.Our subscription should funded with LINK\\n     * 4.The lottery should be in an \\\"open state\\\" \\n     */\\n    function checkUpkeep(\\n        bytes memory /*checkData*/) \\n        public\\n        override\\n        returns(\\n            bool upkeepNeeded, \\n            bytes memory /* performData */\\n        )\\n        {\\n            bool isOpen = ( s_raffleState == RaffleState.OPEN ) ; \\n            bool timePassed = ( (block.timestamp - s_lastTimeStamp ) > i_interval ) ;\\n            bool hasPlayers = ( s_players.length >= 1 ) ;\\n            bool hasBalance = ( address(this).balance > 0 );\\n            upkeepNeeded = ( isOpen && timePassed && hasPlayers && hasBalance ) ; \\n    }\\n\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) public override {\\n        // Request random winner\\n        // Once we get it , do something with it\\n        // 2 transaction process\\n        // Hacker cannot hack by repeatedly calling same func\\n        \\n        (bool upkeepNeeded , ) = checkUpkeep(\\\"\\\"); \\n        if(!upkeepNeeded){\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n                ) ; \\n        }\\n        s_raffleState = RaffleState.CALCULATING ; \\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, //gasLane\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        //this is redundant !! since vrfCoordinator already emits an event\\n        emit RequestedRaffleWinner(requestId) ;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/, \\n        uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        uint256 indexOfWinner = randomWords[0] % (s_players.length) ;\\n        address payable recentWinner = s_players[indexOfWinner] ;\\n        s_recentWinner = recentWinner ;\\n        s_raffleState = RaffleState.OPEN ; \\n        s_players = new address payable [](0)  ;\\n        s_lastTimeStamp = block.timestamp ; \\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");  \\n        if(!success){\\n            revert Raffle__TransferFailed() ; \\n        }\\n\\n        emit WinnerPicked(recentWinner) ;\\n    }\\n\\n    /* view /pure functions */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee ;\\n    }\\n\\n    function getPlayers(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns(address){\\n        return s_recentWinner ; \\n    }\\n\\n    function getRaffleState() public view returns(RaffleState){\\n        return s_raffleState ; \\n    }\\n\\n    function getNumWords() public pure returns(uint256){\\n        return NUM_WORDS; \\n    }\\n    //since NUM_WORDS is immutable (not in storage) so pure can be used  \\n\\n    function getNumberOfPlayers() public view returns(uint256){\\n        return s_players.length ; \\n    }\\n\\n    function getLatestTimestamp() public view returns(uint256){\\n        return s_lastTimeStamp ; \\n    }\\n\\n    function getRequestConfirmations() public pure returns(uint16){\\n        return REQUEST_CONFIRMATIONS ; \\n    }\\n\\n    function getInterval() public view returns(uint256){\\n        return i_interval ; \\n    }\\n\\n    function getSubscriptionId() public view returns(uint128){\\n        return i_subscriptionId ; \\n    }\\n        \\n}\\n\",\"keccak256\":\"0x064e27b685a84d2689b9619d0ed45685f8f9c96069b4cd0b0d96ceb5ddc5223f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620018f7380380620018f7833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611521620003d66000396000818161087401526108e4015260006106e10152600081816106be015261090c0152600061069d01526000610661015260008181610340015261043d01526000818161037d01526103d101526115216000f3fe6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610290578063de3d9fb7146102bb578063f43b52cb146102e6578063fd6673f514610311576100dd565b806353a2c19a146101fc5780635f1b0fd8146102275780636e04ff0d14610252576100dd565b80632cfcc539116100bb5780632cfcc539146101615780634585e33b1461016b578063460e204914610194578063473f1ddc146101d1576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c41565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610cd3565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610e87565b61037b565b005b61016961043b565b005b34801561017757600080fd5b50610192600480360381019061018d9190610f3e565b6105aa565b005b3480156101a057600080fd5b506101bb60048036038101906101b69190610f8b565b6107a9565b6040516101c89190610ff9565b60405180910390f35b3480156101dd57600080fd5b506101e66107f0565b6040516101f39190610ff9565b60405180910390f35b34801561020857600080fd5b5061021161081a565b60405161021e9190610c41565b60405180910390f35b34801561023357600080fd5b5061023c610829565b6040516102499190611031565b60405180910390f35b34801561025e57600080fd5b5061027960048036038101906102749190611101565b610832565b6040516102879291906111ed565b60405180910390f35b34801561029c57600080fd5b506102a56108e0565b6040516102b29190610c41565b60405180910390f35b3480156102c757600080fd5b506102d0610908565b6040516102dd9190611248565b60405180910390f35b3480156102f257600080fd5b506102fb61093a565b6040516103089190610c41565b60405180910390f35b34801561031d57600080fd5b50610326610944565b6040516103339190610c41565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610424929190611263565b60405180910390fd5b6104378282610950565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610495576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a9576104a8610c5c565b5b600160149054906101000a900460ff1660018111156104cb576104ca610c5c565b5b14610502576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105c460405180602001604052806000815250610832565b509050806106335747600080549050600160149054906101000a900460ff1660018111156105f5576105f4610c5c565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161062a9392919061128c565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561065857610657610c5c565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161072295949392919061131e565b602060405180830381600087803b15801561073c57600080fd5b505af1158015610750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107749190611386565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b60008082815481106107be576107bd6113b3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60006003905090565b60006060600080600181111561084b5761084a610c5c565b5b600160149054906101000a900460ff16600181111561086d5761086c610c5c565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108a19190611411565b1190506000600160008054905010159050600080471190508380156108c35750825b80156108cc5750815b80156108d55750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16905090565b6000600254905090565b60008080549050905090565b600080805490508260008151811061096b5761096a6113b3565b5b602002602001015161097d9190611474565b90506000808281548110610994576109936113b3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a2857610a27610c5c565b5b0217905550600067ffffffffffffffff811115610a4857610a47610d44565b5b604051908082528060200260200182016040528015610a765781602001602082028036833780820191505090505b5060009080519060200190610a8c929190610b81565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610aba906114d6565b60006040518083038185875af1925050503d8060008114610af7576040519150601f19603f3d011682016040523d82523d6000602084013e610afc565b606091505b5050905080610b37576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bfa579160200282015b82811115610bf95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ba1565b5b509050610c079190610c0b565b5090565b5b80821115610c24576000816000905550600101610c0c565b5090565b6000819050919050565b610c3b81610c28565b82525050565b6000602082019050610c566000830184610c32565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c9c57610c9b610c5c565b5b50565b6000819050610cad82610c8b565b919050565b6000610cbd82610c9f565b9050919050565b610ccd81610cb2565b82525050565b6000602082019050610ce86000830184610cc4565b92915050565b6000604051905090565b600080fd5b600080fd5b610d0b81610c28565b8114610d1657600080fd5b50565b600081359050610d2881610d02565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d7c82610d33565b810181811067ffffffffffffffff82111715610d9b57610d9a610d44565b5b80604052505050565b6000610dae610cee565b9050610dba8282610d73565b919050565b600067ffffffffffffffff821115610dda57610dd9610d44565b5b602082029050602081019050919050565b600080fd5b6000610e03610dfe84610dbf565b610da4565b90508083825260208201905060208402830185811115610e2657610e25610deb565b5b835b81811015610e4f5780610e3b8882610d19565b845260208401935050602081019050610e28565b5050509392505050565b600082601f830112610e6e57610e6d610d2e565b5b8135610e7e848260208601610df0565b91505092915050565b60008060408385031215610e9e57610e9d610cf8565b5b6000610eac85828601610d19565b925050602083013567ffffffffffffffff811115610ecd57610ecc610cfd565b5b610ed985828601610e59565b9150509250929050565b600080fd5b60008083601f840112610efe57610efd610d2e565b5b8235905067ffffffffffffffff811115610f1b57610f1a610ee3565b5b602083019150836001820283011115610f3757610f36610deb565b5b9250929050565b60008060208385031215610f5557610f54610cf8565b5b600083013567ffffffffffffffff811115610f7357610f72610cfd565b5b610f7f85828601610ee8565b92509250509250929050565b600060208284031215610fa157610fa0610cf8565b5b6000610faf84828501610d19565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fe382610fb8565b9050919050565b610ff381610fd8565b82525050565b600060208201905061100e6000830184610fea565b92915050565b600061ffff82169050919050565b61102b81611014565b82525050565b60006020820190506110466000830184611022565b92915050565b600080fd5b600067ffffffffffffffff82111561106c5761106b610d44565b5b61107582610d33565b9050602081019050919050565b82818337600083830152505050565b60006110a461109f84611051565b610da4565b9050828152602081018484840111156110c0576110bf61104c565b5b6110cb848285611082565b509392505050565b600082601f8301126110e8576110e7610d2e565b5b81356110f8848260208601611091565b91505092915050565b60006020828403121561111757611116610cf8565b5b600082013567ffffffffffffffff81111561113557611134610cfd565b5b611141848285016110d3565b91505092915050565b60008115159050919050565b61115f8161114a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561119f578082015181840152602081019050611184565b838111156111ae576000848401525b50505050565b60006111bf82611165565b6111c98185611170565b93506111d9818560208601611181565b6111e281610d33565b840191505092915050565b60006040820190506112026000830185611156565b818103602083015261121481846111b4565b90509392505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6112428161121d565b82525050565b600060208201905061125d6000830184611239565b92915050565b60006040820190506112786000830185610fea565b6112856020830184610fea565b9392505050565b60006060820190506112a16000830186610c32565b6112ae6020830185610c32565b6112bb6040830184610c32565b949350505050565b6000819050919050565b6112d6816112c3565b82525050565b600067ffffffffffffffff82169050919050565b6112f9816112dc565b82525050565b600063ffffffff82169050919050565b611318816112ff565b82525050565b600060a08201905061133360008301886112cd565b61134060208301876112f0565b61134d6040830186611022565b61135a606083018561130f565b611367608083018461130f565b9695505050505050565b60008151905061138081610d02565b92915050565b60006020828403121561139c5761139b610cf8565b5b60006113aa84828501611371565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061141c82610c28565b915061142783610c28565b92508282101561143a576114396113e2565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061147f82610c28565b915061148a83610c28565b92508261149a57611499611445565b5b828206905092915050565b600081905092915050565b50565b60006114c06000836114a5565b91506114cb826114b0565b600082019050919050565b60006114e1826114b3565b915081905091905056fea2646970667358221220cb1e276e5b6a0a3a1679106926a548853a337a05ab929e971216a40e765281bc64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610290578063de3d9fb7146102bb578063f43b52cb146102e6578063fd6673f514610311576100dd565b806353a2c19a146101fc5780635f1b0fd8146102275780636e04ff0d14610252576100dd565b80632cfcc539116100bb5780632cfcc539146101615780634585e33b1461016b578063460e204914610194578063473f1ddc146101d1576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c41565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610cd3565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610e87565b61037b565b005b61016961043b565b005b34801561017757600080fd5b50610192600480360381019061018d9190610f3e565b6105aa565b005b3480156101a057600080fd5b506101bb60048036038101906101b69190610f8b565b6107a9565b6040516101c89190610ff9565b60405180910390f35b3480156101dd57600080fd5b506101e66107f0565b6040516101f39190610ff9565b60405180910390f35b34801561020857600080fd5b5061021161081a565b60405161021e9190610c41565b60405180910390f35b34801561023357600080fd5b5061023c610829565b6040516102499190611031565b60405180910390f35b34801561025e57600080fd5b5061027960048036038101906102749190611101565b610832565b6040516102879291906111ed565b60405180910390f35b34801561029c57600080fd5b506102a56108e0565b6040516102b29190610c41565b60405180910390f35b3480156102c757600080fd5b506102d0610908565b6040516102dd9190611248565b60405180910390f35b3480156102f257600080fd5b506102fb61093a565b6040516103089190610c41565b60405180910390f35b34801561031d57600080fd5b50610326610944565b6040516103339190610c41565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610424929190611263565b60405180910390fd5b6104378282610950565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610495576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a9576104a8610c5c565b5b600160149054906101000a900460ff1660018111156104cb576104ca610c5c565b5b14610502576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105c460405180602001604052806000815250610832565b509050806106335747600080549050600160149054906101000a900460ff1660018111156105f5576105f4610c5c565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161062a9392919061128c565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561065857610657610c5c565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161072295949392919061131e565b602060405180830381600087803b15801561073c57600080fd5b505af1158015610750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107749190611386565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b60008082815481106107be576107bd6113b3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60006003905090565b60006060600080600181111561084b5761084a610c5c565b5b600160149054906101000a900460ff16600181111561086d5761086c610c5c565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108a19190611411565b1190506000600160008054905010159050600080471190508380156108c35750825b80156108cc5750815b80156108d55750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16905090565b6000600254905090565b60008080549050905090565b600080805490508260008151811061096b5761096a6113b3565b5b602002602001015161097d9190611474565b90506000808281548110610994576109936113b3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a2857610a27610c5c565b5b0217905550600067ffffffffffffffff811115610a4857610a47610d44565b5b604051908082528060200260200182016040528015610a765781602001602082028036833780820191505090505b5060009080519060200190610a8c929190610b81565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610aba906114d6565b60006040518083038185875af1925050503d8060008114610af7576040519150601f19603f3d011682016040523d82523d6000602084013e610afc565b606091505b5050905080610b37576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bfa579160200282015b82811115610bf95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ba1565b5b509050610c079190610c0b565b5090565b5b80821115610c24576000816000905550600101610c0c565b5090565b6000819050919050565b610c3b81610c28565b82525050565b6000602082019050610c566000830184610c32565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c9c57610c9b610c5c565b5b50565b6000819050610cad82610c8b565b919050565b6000610cbd82610c9f565b9050919050565b610ccd81610cb2565b82525050565b6000602082019050610ce86000830184610cc4565b92915050565b6000604051905090565b600080fd5b600080fd5b610d0b81610c28565b8114610d1657600080fd5b50565b600081359050610d2881610d02565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d7c82610d33565b810181811067ffffffffffffffff82111715610d9b57610d9a610d44565b5b80604052505050565b6000610dae610cee565b9050610dba8282610d73565b919050565b600067ffffffffffffffff821115610dda57610dd9610d44565b5b602082029050602081019050919050565b600080fd5b6000610e03610dfe84610dbf565b610da4565b90508083825260208201905060208402830185811115610e2657610e25610deb565b5b835b81811015610e4f5780610e3b8882610d19565b845260208401935050602081019050610e28565b5050509392505050565b600082601f830112610e6e57610e6d610d2e565b5b8135610e7e848260208601610df0565b91505092915050565b60008060408385031215610e9e57610e9d610cf8565b5b6000610eac85828601610d19565b925050602083013567ffffffffffffffff811115610ecd57610ecc610cfd565b5b610ed985828601610e59565b9150509250929050565b600080fd5b60008083601f840112610efe57610efd610d2e565b5b8235905067ffffffffffffffff811115610f1b57610f1a610ee3565b5b602083019150836001820283011115610f3757610f36610deb565b5b9250929050565b60008060208385031215610f5557610f54610cf8565b5b600083013567ffffffffffffffff811115610f7357610f72610cfd565b5b610f7f85828601610ee8565b92509250509250929050565b600060208284031215610fa157610fa0610cf8565b5b6000610faf84828501610d19565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fe382610fb8565b9050919050565b610ff381610fd8565b82525050565b600060208201905061100e6000830184610fea565b92915050565b600061ffff82169050919050565b61102b81611014565b82525050565b60006020820190506110466000830184611022565b92915050565b600080fd5b600067ffffffffffffffff82111561106c5761106b610d44565b5b61107582610d33565b9050602081019050919050565b82818337600083830152505050565b60006110a461109f84611051565b610da4565b9050828152602081018484840111156110c0576110bf61104c565b5b6110cb848285611082565b509392505050565b600082601f8301126110e8576110e7610d2e565b5b81356110f8848260208601611091565b91505092915050565b60006020828403121561111757611116610cf8565b5b600082013567ffffffffffffffff81111561113557611134610cfd565b5b611141848285016110d3565b91505092915050565b60008115159050919050565b61115f8161114a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561119f578082015181840152602081019050611184565b838111156111ae576000848401525b50505050565b60006111bf82611165565b6111c98185611170565b93506111d9818560208601611181565b6111e281610d33565b840191505092915050565b60006040820190506112026000830185611156565b818103602083015261121481846111b4565b90509392505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6112428161121d565b82525050565b600060208201905061125d6000830184611239565b92915050565b60006040820190506112786000830185610fea565b6112856020830184610fea565b9392505050565b60006060820190506112a16000830186610c32565b6112ae6020830185610c32565b6112bb6040830184610c32565b949350505050565b6000819050919050565b6112d6816112c3565b82525050565b600067ffffffffffffffff82169050919050565b6112f9816112dc565b82525050565b600063ffffffff82169050919050565b611318816112ff565b82525050565b600060a08201905061133360008301886112cd565b61134060208301876112f0565b61134d6040830186611022565b61135a606083018561130f565b611367608083018461130f565b9695505050505050565b60008151905061138081610d02565b92915050565b60006020828403121561139c5761139b610cf8565b5b60006113aa84828501611371565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061141c82610c28565b915061142783610c28565b92508282101561143a576114396113e2565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061147f82610c28565b915061148a83610c28565b92508261149a57611499611445565b5b828206905092915050565b600081905092915050565b50565b60006114c06000836114a5565b91506114cb826114b0565b600082019050919050565b60006114e1826114b3565b915081905091905056fea2646970667358221220cb1e276e5b6a0a3a1679106926a548853a337a05ab929e971216a40e765281bc64736f6c63430008090033",
  "devdoc": {
    "author": "Mudit Jain",
    "details": "this contract implements Chainlink VRF2 and Chainlink Keepers ",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that chainlink keeper nodes call to check if 'upkeepNeeded' is true   conditons for upkeep to be true 1.passage of time passed  2.lottery should have 1 player atleast and some ETH 3.Our subscription should funded with LINK 4.The lottery should be in an \"open state\" "
      }
    },
    "title": "A sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RaffleEnter(address)": {
        "notice": "Events "
      }
    },
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating an untamperable decentralized smart Contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 198,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 215,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 218,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)192"
      },
      {
        "astId": 220,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)192": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}